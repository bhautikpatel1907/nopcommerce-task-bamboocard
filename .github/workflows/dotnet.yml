# This workflow will build a NopCommerce v4.80 .NET v9.0-based project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: NopComv4.80-bamboo .NET CI/CD Pipeline

on:
  push:
    branches: 
      - dev       # ðŸ”„ Run on feature/active development
      - main      # âœ… Run when PR is merged into main
  #pull_request:
   # branches: 
    #  - main      # ðŸ§ª Run when PR targets main

permissions:
  contents: write 

env:
  ARTIFACT_NAME: nopcommerce-release.zip
  DEV_IIS_PATH: C:\inetpub\wwwroot\bamboo-git\published_output
  UAT_IIS_PATH: C:\inetpub\wwwroot\bamboo-uat\published_output  # Different location for UAT

jobs:
  build:
    runs-on: windows-latest
    outputs:
      env: ${{ github.ref_name == 'main' && 'uat' || 'dev' }}  # Set environment flag

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1  # Shallow clone (faster)
    
    - name: Cache NuGet
      uses: actions/cache@v4
      with:
        path: |
          ~\.nuget\packages
          src\packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore & Build
      run: |
        dotnet restore src/NopCommerce.sln --verbosity minimal
        dotnet build src/NopCommerce.sln -c Release --no-restore -m:2

    # - name: Run Tests (optional)
    #   run: dotnet test src/NopCommerce.sln
    #   continue-on-error: true
    
    - name: Publish
      run: dotnet publish src/Presentation/Nop.Web/Nop.Web.csproj -c Release -o published_output --no-build

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: nopcommerce-${{ github.ref_name }}  # Artifact name includes branch
        path: published_output/
        
  release:
    needs: build
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/main'

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: nopcommerce-${{ github.ref_name }}
          path: artifact_content
    
      - name: Zip Artifacts
        run: |
          cd artifact_content
          zip -r ../${{ env.ARTIFACT_NAME }} ./*
          cd ..
          ls -lh

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: release-${{ github.ref_name }}-${{ github.run_number }}
          name: "Release ${{ github.ref_name }} (${{ needs.build.outputs.env }})"
          body: |
            Branch: ${{ github.ref_name }}
            Environment: ${{ needs.build.outputs.env }}
            Commit: ${{ github.sha }}
          files: ${{ env.ARTIFACT_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify Release
        run: |
          echo "Release created with tag: release-${{ github.ref_name }}-${{ github.run_number }}"
          echo "View at: https://github.com/${{ github.repository }}/releases/tag/release-${{ github.ref_name }}-${{ github.run_number }}"
          
  deploy:
    needs: release
    runs-on: self-hosted
    
    steps:
      - name: Determine Environment
        id: env
        run: |
          echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "env=${{ github.ref_name == 'main' && 'uat' || 'dev' }}" >> $GITHUB_OUTPUT

      # - name: Wait for GitHub Release to be created
      #   run: Start-Sleep -Seconds 5
        
      - name: Download Artifact
        uses: robinraju/release-downloader@v1.8
        with:
          repository: ${{ github.repository }}
          tag: release-${{ github.ref_name }}-*  # Matches branch-based tag
          # latest: true
          fileName: ${{ env.ARTIFACT_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Clean Existing Extract Folder
        run: Remove-Item -Path deployed_output -Recurse -Force -ErrorAction SilentlyContinue
      
      - name: Extract Artifact
        run: Expand-Archive -Path nopcommerce-release.zip -DestinationPath deployed_output -Force

      - name: Deploy to IIS
        shell: powershell
        run: |
          $iisPath = if ("${{ steps.env.outputs.env }}" -eq "dev") {
            "${{ env.DEV_IIS_PATH }}"
          } else {
            "${{ env.UAT_IIS_PATH }}"
          }

          $siteName = "bamboo-${{ steps.env.outputs.env }}"
          $appPoolName = "bamboo-${{ steps.env.outputs.env }}"

          # Stop IIS Site and App Pool (forcefully)
          Stop-WebSite -Name $siteName -ErrorAction SilentlyContinue
          Stop-WebAppPool -Name $appPoolName -ErrorAction SilentlyContinue

          # Kill lingering w3wp.exe processes (if any)
          Get-Process -Name "w3wp" -ErrorAction SilentlyContinue | Stop-Process -Force

          # Wait to ensure processes release locks
          Start-Sleep -Seconds 5

          # Clear target dir (except critical files)
          $exclude = @("App_Data", "wwwroot", "Logs", "web.config")
          Get-ChildItem -Path $iisPath | Where-Object { $exclude -notcontains $_.Name } | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue

          # Deploy new files
          Copy-Item -Path "deployed_output\published_output\*" -Destination $iisPath -Recurse -Force

          # Restart IIS
          Write-Host "Restarting IIS ${{ steps.env.outputs.env }}..."
          Start-WebAppPool -Name $appPoolName
          Start-WebSite -Name $siteName
          Write-Host "Deployed to ${{ steps.env.outputs.env }}"
